// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 判断执行A 或是 C
    Mux(a=true, b=false, sel=instruction[15], out=isA);
    Not(in=isA, out=isC);

    //or Mux16(a=aluOut, b=instruction, sel=isA, out=aluOutOrInst);
    Mux16(a=instruction, b=aluOut, sel=isC, out=aluOutOrInst);

    // A register
    Or(a=isA, b=writeA, out=loadA);
    ARegister(in=aluOutOrInst, load=loadA, out=regA, out[0..14]=addressM);

    // memory or value data
    Mux16(a=regA, b = inM, sel = instruction[12], out = memData);

    // 分解c 指令
    // 15 14 13 12 11 10 9  8 7  6 5 4 3 2 1 0
    //     -  - A  c1 c2 c3 4 5 c6 A D M L E G
    // comp 部分 ins[6..11]
    // dest 部分 ins[3..5]
    // jmp 部分  ins[0..2]
    // A register
    // D register
    // M memory

    And(a=instruction[5], b=isC, out=writeA);
    And(a=instruction[4], b=isC, out=writeD);
    And(a=instruction[3], b=isC, out=writeM);

    //And(a=writeD, b=true, out = loadD);
    DRegister(in=aluOut, load=writeD, out = regD);

    /*
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
    */
    ALU(x=regD, y=memData,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=outM,
        out=aluOut, zr=aluZr, ng=aluNg);

    // jmp
    // j1    j2    j3
    // 2     1     0
    // Less Equal Great

    // 1 0 0   < 0
    And(a=aluNg, b=instruction[2], out=jmpLe);

    // 0 1 0   = 0
    And(a=aluZr, b=instruction[1], out=jmpEq);

    // 0 0 1  > 0
    Or(a=aluNg, b=aluZr, out=aluNgOrZr);
    Not(in=aluNgOrZr, out=aluGr);
    And(a=aluGr, b=instruction[0], out=jmpGr);

    // 0 1 1  >=0
    // 1 0 1  !=0
    // 1 1 0  <=0
    Or(a=jmpLe, b=jmpEq, out=jmpLeOrEq);
    Or(a=jmpGr, b=jmpLeOrEq, out=jmpLeOrEqOrGr);
    And(a=jmpLeOrEqOrGr, b=isC, out=isJmp);

    PC(in=regA, load=isJmp, inc=true, reset=reset, out[0..14]=pc);
}